while True:
    cpf = input('Entre com o seu cpf: ')

    # Remove os pontos e traços do cpf digitado pelo usuário
    if '.' in cpf or '-' in cpf:
        cpf = cpf.replace('.', '')
        cpf = cpf.replace('-', '')

        # Teste para validar se o cpf do usuário é do tipo numérico e possui 11 dígitos (padrão do cpf)
        while not cpf.isnumeric() or len(cpf) != 11:
            cpf = (input('Erro! Digite um valor correto: '))

    # Teste para descobrir o penúltimo dígito do cpf do usuário
    VerificaDigitos = cpf[:9]

    # validação do penúltimo número do cpf
    Validacao1 = 10
    Somadig1 = 0

    # função que multiplica os 9 primeiros dígitos de um cpf de forma decrescente de 10 até 2
    for Digito1 in VerificaDigitos:
        resultado = int(Digito1)*Validacao1
        Validacao1 -= 1
        Somadig1 += resultado

    resto = Somadig1 % 11

    # Validação do penúltimo dígito do cpf do usuário
    if resto < 2:
        numero_valido = 0
    else:
        Digitoreal = 11
        Digitocerto = Digitoreal - resto
        numero_valido = Digitocerto
        
        
        
        
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



class CPF:
    def __init__(self, cpf):

        """
            Este é o construtor que recebe o número do CPF como argumento.
        """

        self.cpf = cpf
    
    def cpf_formatado(self):

        """
            Este método formata o número do CPF removendo quaisquer pontos ou hífens.
        """

        if '.' in self.cpf or '-' in self.cpf:
            self.cpf = self.cpf.replace('.', '')
            self.cpf = self.cpf.replace('-', '')
        return self.cpf
    
    def cpf_valido(self):

        """
            Este método verifica se o número do CPF é válido verificando se é numérico e se possui
            11 dígitos. Se não for válido, ele solicita que o usuário insira um número de CPF válido.
        """

        while not self.cpf.isnumeric() or len(self.cpf) != 11:
            self.cpf = (input('Erro! DIGITE UM NÚMERO VÁLIDO: '))
        return self.cpf
    
    def digito_iguais(self):

        """
            Este método verifica se todos os dígitos do número do CPF são iguais, o que tornaria o número inválido.
        """

        igual = 0
        for i in range(0, 11):
            igual += int(self.cpf[i])
            i += 1
        if int(self.cpf[0]) == igual / 11:    
            print('CPF INVÁLIDO. TODOS DIGITOS SÃO IGUAIS!')    
            return False
        return True
    
    def veririfica_digito1(self, VerificaDigitos):

        """
            Este método calcula o primeiro dígito verificador do número do CPF.
        """
        Validacao1 = 10
        Somadig1 = 0
        for Digito1 in VerificaDigitos:
            resultado = int(Digito1)*Validacao1
            Validacao1 -= 1
            Somadig1 += resultado
        resto = Somadig1 % 11
        if resto < 2:
            numero_valido = 0
        else:
            Digitoreal = 11
            Digitocerto = Digitoreal - resto
            numero_valido = Digitocerto
        return numero_valido
    
    def verifica_digit2(self, cpfdig10):

        """
            Este método calcula o segundo dígito verificador do número do CPF.
        """
        Validacao2 = 11
        Somadig2 = 0
        for Digito2 in cpfdig10:
            resultado = int(Digito2)*Validacao2
            Validacao2 -= 1
            Somadig2 += resultado
        resto_2 = Somadig2 % 11
        if resto_2 < 2:
            valida_segundo_numero = 0
        else:
            segundo_Digitoreal = 11
            segundo_Digitocerto = segundo_Digitoreal - resto_2
            valida_segundo_numero = segundo_Digitocerto
        return valida_segundo_numero
    
    def validar_cpf(self):

        """
            Este é o método principal que chama os outros métodos e realiza
            o processo de validação. Imprime "CPF VÁLIDO" se o número do CPF
            for válido e "CPF INVÁLIDO" caso contrário.
        """

        self.cpf = self.cpf_formatado()
        self.cpf = self.cpf_valido()
        if not self.digito_iguais():
            return
        VerificaDigitos = self.cpf[:9]
        numero_valido = self.veririfica_digito1(VerificaDigitos)
        cpfdig10 = VerificaDigitos + str(numero_valido)
        valida_se
        valida_segundo_numero = verifica_digit2(cpfdig10)
        cpf_valido = cpf[:9] + str(numero_valido) + str(valida_segundo_numero)
        if cpf_valido == cpf:
            print(' CPF VÁLIDO .')
        else:
            print(' CPF INVÁLIDO .')

    # constantes da validação do último número do cpf
    Validacao2 = 11
    Somadig2 = 0

    cpfdig10 = VerificaDigitos + str(numero_valido)
    # função que multiplica os 9 primeiros dígitos de um cpf de forma decrescente de 10 até 2
    for Digito2 in cpfdig10:
        resultado = int(Digito2)*Validacao2
        Validacao2 -= 1
        Somadig2 += resultado

    resto_2 = Somadig2 % 11

    # Validação do último dígito do cpf do usuário
    if resto_2 < 2:
        valida_segundo_numero = 0
    else:
        segundo_Digitoreal = 11
        segundo_Digitocerto = segundo_Digitoreal - resto_2
        valida_segundo_numero = segundo_Digitocerto

    cpf_valido = cpf[:9] + str(numero_valido) + \
        str(valida_segundo_numero)

    if cpf_valido == cpf:
        print('cpf VÁLIDO.')
    else:
        print('cpf INVÁLIDO.')
    break
