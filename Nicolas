class ValidaCpf:

    def cpfValido(self, number):

         # comprimento inválido ou dígitos repetidos
        if len(number) != 11 or re.search(r"(\d)(\1{10})", number): return False
        

        for cycle in range(2):

            limitIndex = 9 if cycle == 0 else 10
            baseWeight = limitIndex + 1
            temp = 0

            for index in range(0, limitIndex):
                temp += int(number[index]) * (baseWeight - index)

            temp %= 11
            digito = 0 if temp < 2 else 11 - temp

            if digito != int(number[limitIndex]):
                return False

        return True


# main

ValidaCpf = ValidaCpf()

while True:

    print()
    print("-"*41)
    print("Digite os digitos do CPF [digite X para sair]")
    print("-"*41)
    try:
      cpf = int(input("? "))  
      # if cpf.upper() == "X": break
    except ValueError:
      print("Oops! Isso não é um número válido....")
    finally:
      print("\nCPF é " + ("Valido!" if ValidaCpf.cpfValido(cpf) else " I N V Á L I D O  !!!"))     
    if cpf.upper() == "X": break  
    
    
    
    
    
    --------------------------------------------------------------------------------------------
    
    
    
import datetime

def cpf_valido(cpf):
    cpf = cpf.replace('.', '').replace('-', '')
    if len(cpf) != 11 or not cpf.isnumeric() or todos_numeros_iguais(cpf):
        return False
    numDV1 = recupera_primeiro_digito(cpf)
    numDV2 = recupera_segundo_digito(cpf, numDV1)
    if int(numDV1) == int(cpf[9]) and int(numDV2) == int(cpf[10]):
        return True

def todos_numeros_iguais(cpf):
    numIG = 0
    for i in range(0, 11):
        numIG += int(cpf[i])
    if int(cpf[0]) == numIG / 11:
        return True
    return False

def recupera_primeiro_digito(cpf):
    numDV1 = 0
    for i in range(1, 10):
        numDV1 = numDV1 + int(cpf[i-1:i]) * i
    numDV1 = numDV1 % 11
    if (numDV1 == 10):
        numDV1 = 0
    return numDV1

def recupera_segundo_digito(cpf, numDV1):
    numDV2 = 0
    for i in range(2, 11):
        numDV2 = numDV2 + int(cpf[i-1:i]) * (i-1)
    numDV2 = numDV2 % 11
    if (numDV2 == 10):
        numDV2 = 0
    return numDV2


if __name__ == '__main__':
    try:
        print('Informe o CPF')
        cpf = str(input())
        if cpf_valido(cpf):
            print('CPF é válido.')
            with open("valid_cpf.txt", "a") as valid_file:
                valid_file.write(cpf + "\n")
        else:
            print('CPF inválido')
            with open("invalid_cpf.txt", "a") as invalid_file:
                invalid_file.write(cpf + "\n")

        agora = datetime.datetime.now()
        data_str = agora.strftime('%d/%m/%Y %H:%M')
        print(data_str)
    except Exception as e:
        with open("errors.txt", "a") as error_file:
            error_file.write("Error: " + str(e) + "\n")

        agora = datetime.datetime.now()
        data_str = agora.strftime('%d/%m/%Y %H:%M')
        print(data_str)  
